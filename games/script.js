// Vietnamese Games List JavaScript

// Sample game data
const gamesData = [
    {
        id: 1,
        title: "The Witcher 3: Wild Hunt",
        description: "M·ªôt trong nh·ªØng t·ª±a game RPG hay nh·∫•t m·ªçi th·ªùi ƒë·∫°i v·ªõi th·∫ø gi·ªõi m·ªü r·ªông l·ªõn v√† c√¢u chuy·ªán h·∫•p d·∫´n. Phi√™n b·∫£n vi·ªát h√≥a ƒë·∫ßy ƒë·ªß v·ªõi l·ªìng ti·∫øng v√† ph·ª• ƒë·ªÅ.",
        category: "rpg",
        status: "completed",
        statusText: "Ho√†n th√†nh 100%",
        icon: "üó°Ô∏è",
        downloadLink: "#",
        releaseYear: 2015,
        size: "35GB"
    },
    {
        id: 2,
        title: "Cyberpunk 2077",
        description: "Game nh·∫≠p vai th·∫ø gi·ªõi m·ªü v·ªõi b·ªëi c·∫£nh t∆∞∆°ng lai ƒë·∫ßy c√¥ng ngh·ªá. Vi·ªát h√≥a bao g·ªìm ph·ª• ƒë·ªÅ v√† menu ho√†n ch·ªânh.",
        category: "rpg",
        status: "progress",
        statusText: "ƒêang vi·ªát h√≥a 85%",
        icon: "ü§ñ",
        downloadLink: "#",
        releaseYear: 2020,
        size: "70GB"
    },
    {
        id: 3,
        title: "Assassin's Creed Valhalla",
        description: "H√†nh tr√¨nh c·ªßa m·ªôt warrior Viking trong th·∫ø gi·ªõi Anh th·ªùi trung c·ªï. Phi√™n b·∫£n vi·ªát h√≥a v·ªõi ph·ª• ƒë·ªÅ ƒë·∫ßy ƒë·ªß.",
        category: "action",
        status: "completed",
        statusText: "Ho√†n th√†nh 100%",
        icon: "‚öîÔ∏è",
        downloadLink: "#",
        releaseYear: 2020,
        size: "50GB"
    },
    {
        id: 4,
        title: "Red Dead Redemption 2",
        description: "C√¢u chuy·ªán mi·ªÅn T√¢y hoang d√£ v·ªõi ƒë·ªì h·ªça tuy·ªát ƒë·∫πp v√† gameplay s√¢u s·∫Øc. Vi·ªát h√≥a ho√†n ch·ªânh c·∫£ ph·ª• ƒë·ªÅ v√† menu.",
        category: "adventure",
        status: "completed",
        statusText: "Ho√†n th√†nh 100%",
        icon: "ü§†",
        downloadLink: "#",
        releaseYear: 2018,
        size: "120GB"
    },
    {
        id: 5,
        title: "Age of Empires IV",
        description: "Game chi·∫øn thu·∫≠t th·ªùi gian th·ª±c kinh ƒëi·ªÉn v·ªõi ƒë·ªì h·ªça hi·ªán ƒë·∫°i. Vi·ªát h√≥a ƒë·∫ßy ƒë·ªß interface v√† tutorial.",
        category: "strategy",
        status: "progress",
        statusText: "ƒêang vi·ªát h√≥a 70%",
        icon: "üè∞",
        downloadLink: "#",
        releaseYear: 2021,
        size: "25GB"
    },
    {
        id: 6,
        title: "Horizon Zero Dawn",
        description: "Phi√™u l∆∞u trong th·∫ø gi·ªõi h·∫≠u t·∫≠n th·∫ø v·ªõi robot kh·ªßng long. Vi·ªát h√≥a ho√†n ch·ªânh v·ªõi ph·ª• ƒë·ªÅ ti·∫øng Vi·ªát.",
        category: "adventure",
        status: "completed",
        statusText: "Ho√†n th√†nh 100%",
        icon: "üèπ",
        downloadLink: "#",
        releaseYear: 2017,
        size: "67GB"
    }
];

// DOM Elements
const gamesContainer = document.getElementById('gamesContainer');
const searchInput = document.getElementById('searchInput');
const categoryFilter = document.getElementById('categoryFilter');

// State
let filteredGames = [...gamesData];

// Initialize the app
document.addEventListener('DOMContentLoaded', function() {
    renderGames(gamesData);
    initializeEventListeners();
    addScrollAnimations();
});

// Render games to the DOM
function renderGames(games) {
    if (games.length === 0) {
        gamesContainer.innerHTML = `
            <div class="col-12 text-center py-5">
                <div class="display-1 mb-3">üòî</div>
                <h3>Kh√¥ng t√¨m th·∫•y game n√†o</h3>
                <p class="text-muted">Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c b·ªô l·ªçc</p>
            </div>
        `;
        return;
    }

    const gamesHTML = games.map(game => `
        <div class="col-lg-4 col-md-6 game-item fade-in" data-category="${game.category}">
            <div class="game-card h-100">
                <div class="game-image">
                    <span>${game.icon}</span>
                </div>
                <div class="game-body">
                    <h5 class="game-title">${game.title}</h5>
                    <p class="game-description">${game.description}</p>
                    <span class="game-category">${getCategoryName(game.category)}</span>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <small class="game-status ${game.status === 'completed' ? 'status-completed' : 'status-progress'}">
                            ${game.statusText}
                        </small>
                        <small class="text-muted">${game.size}</small>
                    </div>
                    <div class="mt-3">
                        <a href="${game.downloadLink}" class="download-btn" onclick="handleDownload('${game.title}')">
                            üì• T·∫£i v·ªÅ
                        </a>
                    </div>
                </div>
            </div>
        </div>
    `).join('');

    gamesContainer.innerHTML = gamesHTML;
    
    // Add animation delay for each card
    const gameCards = document.querySelectorAll('.game-item');
    gameCards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
    });
}

// Get category display name
function getCategoryName(category) {
    const categories = {
        'rpg': 'RPG',
        'action': 'H√†nh ƒë·ªông',
        'adventure': 'Phi√™u l∆∞u',
        'strategy': 'Chi·∫øn thu·∫≠t'
    };
    return categories[category] || category;
}

// Initialize event listeners
function initializeEventListeners() {
    // Search functionality
    searchInput.addEventListener('input', debounce(handleSearch, 300));
    
    // Category filter
    categoryFilter.addEventListener('change', handleCategoryFilter);
    
    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// Handle search
function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase().trim();
    applyFilters(searchTerm, categoryFilter.value);
}

// Handle category filter
function handleCategoryFilter(e) {
    const category = e.target.value;
    applyFilters(searchInput.value.toLowerCase().trim(), category);
}

// Apply filters
function applyFilters(searchTerm, category) {
    filteredGames = gamesData.filter(game => {
        const matchesSearch = !searchTerm || 
            game.title.toLowerCase().includes(searchTerm) ||
            game.description.toLowerCase().includes(searchTerm);
        
        const matchesCategory = !category || game.category === category;
        
        return matchesSearch && matchesCategory;
    });
    
    renderGames(filteredGames);
}

// Handle download click
function handleDownload(gameTitle) {
    // Show download notification
    showNotification(`B·∫Øt ƒë·∫ßu t·∫£i "${gameTitle}"`, 'success');
    
    // In a real application, this would handle the actual download
    console.log(`Downloading: ${gameTitle}`);
}

// Show notification
function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'success' ? 'success' : 'info'} alert-dismissible fade show position-fixed`;
    notification.style.cssText = `
        top: 20px;
        right: 20px;
        z-index: 1050;
        min-width: 300px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    
    notification.innerHTML = `
        <strong>${type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è'}</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (notification && notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// Debounce function for search
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Add scroll animations
function addScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    // Observe elements that should animate on scroll
    setTimeout(() => {
        document.querySelectorAll('.game-item').forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(30px)';
            item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(item);
        });
    }, 100);
}

// Add some interactive features
document.addEventListener('DOMContentLoaded', function() {
    // Add loading effect for images
    const gameImages = document.querySelectorAll('.game-image');
    gameImages.forEach(img => {
        img.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.05)';
        });
        
        img.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });
    
    // Add keyboard navigation
    document.addEventListener('keydown', function(e) {
        if (e.key === '/' && e.ctrlKey) {
            e.preventDefault();
            searchInput.focus();
        }
    });
});

// Stats counter animation
function animateStats() {
    const statsElements = document.querySelectorAll('[data-count]');
    
    statsElements.forEach(element => {
        const finalCount = parseInt(element.dataset.count);
        const duration = 2000;
        const startTime = performance.now();
        
        function updateCount(currentTime) {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const currentCount = Math.floor(progress * finalCount);
            
            element.textContent = currentCount;
            
            if (progress < 1) {
                requestAnimationFrame(updateCount);
            }
        }
        
        requestAnimationFrame(updateCount);
    });
}

// Initialize stats animation when section is visible
const statsSection = document.querySelector('#stats');
if (statsSection) {
    const statsObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                animateStats();
                statsObserver.unobserve(entry.target);
            }
        });
    });
    
    statsObserver.observe(statsSection);
}